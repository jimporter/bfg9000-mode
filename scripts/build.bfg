# Do this first, before we add any extraneous symbols below.
build_names = sorted(__bfg9000__)

license = """\
Copyright (C) 2021-2023 Jim Porter

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
from enum import Enum
from inspect import isfunction
from textwrap import dedent


def collect_names(names, dictionary):
    collected = {
        'function': [],
        'value': [],
        'enum': [],
        'exception': [],
        'type': []
    }

    for i in names:
        if i == '__builtins__':
            continue

        builtin = dictionary[i]
        if isfunction(builtin):
            collected['function'].append(i)
        elif not isinstance(builtin, type):
            collected['value'].append(i)
        elif issubclass(builtin, Enum):
            collected['enum'].append(i)
        elif issubclass(builtin, Exception):
            collected['exception'].append(i)
        else:
            collected['type'].append(i)

    return collected


def print_names(names, kind, *, context='bfg9000', file=None):
    print('(defvar {}--{}-keywords'.format(context, kind), file=file)
    indent = 2
    col = 0
    for i, name in enumerate(names):
        name = '"{}"'.format(name)
        if i == 0:
            name = "'(" + name
        if i == len(names) - 1:
            name += ')'

        if col > 0 and col + len(name) >= 80:
            print(file=file)
            col = 0

        if col == 0:
            print(' ' * indent, end='', file=file)
            col += indent
            indent = 4  # After the first line, indent by 4 characters.
        else:
            print(' ', end='', file=file)
            col += 1

        col += len(name)
        print(name, end='', file=file)
    print('\n  "List of built-in {} names for `{}-mode\'.")'
          .format(kind, context), file=file)


build_names = collect_names(build_names, __bfg9000__)
options_names = collect_names(sorted(argv.keywords), argv.keywords)
basename = os.path.basename(argv.file)

# Write the header for our output file.
with open(argv.file, 'w') as f:
    print(';;; {} --- bfg9000 keywords -*- lexical-binding: t -*-\n'
          .format(basename), file=f)
    for line in license.splitlines():
        if line:
            print(';; ' + line, file=f)
        else:
            print(file=f)
    print(dedent("""
        ;;; Commentary:

        ;; WARNING: This file is auto-generated!
        ;; Use "make {}" to regenerate it.

        ;;; Code:
    """).format(basename), end='', file=f)

    # Write defvars for each kind of built-in.
    for kind, names in build_names.items():
        if names:
            print(file=f)
            print_names(names, kind, file=f)
    for kind, names in options_names.items():
        if names:
            print(file=f)
            print_names(names, kind, context='bfg9000-options', file=f)

    # Write the footer for our output file.
    print(dedent("""
        (provide '{})
        ;;; {} ends here
    """).format(os.path.splitext(basename)[0], basename), end='', file=f)
